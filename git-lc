#!/usr/bin/env python

import subprocess
import sys


def lazy_checkout(input_branch_name):
    command = ["git", "branch"]

    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    output, error = process.communicate()

    if error:
        print error
        exit()

    git_branches = output.split('\n')

    matched_branch_names = []

    for branch in git_branches:
        branch = branch.replace('*', '').strip()

        if not len(branch) > 0: continue

        if input_branch_name not in branch: continue

        matched_branch_names.append(branch)

    if not matched_branch_names:
        print "Your input does not match any available branches"
        exit()

    if len(matched_branch_names) == 1:
        branch_selection = matched_branch_names[0]
    else:
        selection = get_branch_selection(matched_branch_names) - 1
        branch_selection = matched_branch_names[selection]

    subprocess.call(["git", "checkout", branch_selection])


def display_matched_branches(selection_range, matched_branch_names):
    for selection_number in selection_range:
        print `selection_number` + ") " + matched_branch_names[selection_number - 1]
    return selection_range


def get_branch_selection(matched_branch_names):
    selection_range = range(1, len(matched_branch_names) + 1)

    display_matched_branches(selection_range, matched_branch_names)

    selection = int_or_none(raw_input("Given branch name matches several available branches. Please select one: "))

    if selection is None or selection not in selection_range:
        selection = get_branch_selection(matched_branch_names)

    return selection


def int_or_none(input_string):
    try:
        return int(input_string)
    except ValueError:
        return None


if len(sys.argv) < 2:
    print "Invalid number of args"
    exit()

inputBranchName = sys.argv[1]

lazy_checkout(inputBranchName)